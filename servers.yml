AWSTemplateFormatVersion: 2010-09-09
Description: Udagram servers infrastructure

Parameters:
  NetworkStackName:
    Description: The name of the stack with the network components
    Type: String

Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LoadBalancerSG
      GroupDescription: Allow HTTP to the load balancer
      VpcId:
        Fn::ImportValue: 
          !Sub ${NetworkStackName}-VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: {Ref: 'AWS::StackName'}

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServerSG
      GroupDescription: Allow HTTP to the server and SSH from local only
      VpcId:
        Fn::ImportValue: 
          !Sub ${NetworkStackName}-VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: {Ref: 'AWS::StackName'}

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: UdagramWebAppLaunchConfig
      # IamInstanceProfile: !Ref InstancesProfile # TODO
      ImageId: ami-013f17f36f8b1fefb
      InstanceType: t3.medium
      KeyName: udagram-private-servers
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sdk
          Ebs:
            VolumeSize: 10
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Udagram Demo Web Server Up and Running!" > index.html

  # InstancesProfile: # TODO
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Path: /
  #     Roles:
  #       - rolename

  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub ${NetworkStackName}-priv-sn-1
        - Fn::ImportValue:
            !Sub ${NetworkStackName}-priv-sn-2
      LaunchConfigurationName: 
        Ref: WebAppLaunchConfig
      MaxSize: '5'
      MinSize: '3'
      TargetGroupARNs:
        - Ref: WebAppTargetGroup
      Tags:
        - Key: Name
          Value: {Ref: 'AWS::StackName'}
          PropagateAtLaunch: true

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: udagram-wa-target-group
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkStackName}-VPCId
      Tags:
        - Key: Name
          Value: {Ref: 'AWS::StackName'}

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: udagram-wa-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${NetworkStackName}-pub-sn-1
        - Fn::ImportValue: !Sub ${NetworkStackName}-pub-sn-2
      Tags:
        - Key: Name
          Value: {Ref: 'AWS::StackName'}
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

Outputs: {}